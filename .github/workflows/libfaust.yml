name: libfaust

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # build-ubuntu:
  #   strategy:
  #     matrix:
  #       include:
  #         - name: ubuntu-x86_64
  #           theContainer: docker://quay.io/pypa/manylinux2014_x86_64
  #           os: ubuntu-20.04
  #           cmake-options: >-
  #             -DCMAKE_BUILD_TYPE=Release
  #             -DCMAKE_VERBOSE_MAKEFILE=ON
  #           llvm-options: >-
  #             -DLLVM_TARGETS_TO_BUILD="X86"
  #             -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-linux-gnu"
  #             -DLLVM_ENABLE_ZLIB=off
  #             -DLLVM_OPTIMIZED_TABLEGEN=ON
  #             -DLLVM_INCLUDE_TESTS=OFF

  #   runs-on: ${{ matrix.os }}
  #   container:
  #     image: ${{matrix.theContainer}}

  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: true

  #   - name: Restore libsndfile
  #     id: cache-libsndfile-restore
  #     uses: actions/cache/restore@v3
  #     with:
  #       path: libsndfile
  #       key: cache-libsndfile-${{ matrix.name }}

  #   - name: Clone libsndfile
  #     if: steps.cache-libsndfile-restore.outputs.cache-hit != 'true'
  #     uses: actions/checkout@v3
  #     with:
  #       repository: libsndfile/libsndfile
  #       path: libsndfile

  #   - name: Build libsndfile
  #     if: steps.cache-libsndfile-restore.outputs.cache-hit != 'true'
  #     run: |
  #       cd libsndfile
  #       cmake -Bbuild -G "Unix Makefiles" ${{matrix.cmake-options}} -DBUILD_EXAMPLES=OFF
  #       cmake --build build --config Release

  #   - name: Cache libsndfile output
  #     id: cache-libsndfile-save
  #     uses: actions/cache/save@v3
  #     with:
  #       path: libsndfile
  #       key: ${{ steps.cache-libsndfile-restore.outputs.cache-primary-key }}

  #   - name: Restore LLVM
  #     id: cache-llvm-restore
  #     uses: actions/cache/restore@v3
  #     with:
  #       path: llvm-project
  #       key: cache-llvm-${{ matrix.name }}

  #   - name: Clone LLVM
  #     if: steps.cache-llvm-restore.outputs.cache-hit != 'true'
  #     uses: actions/checkout@v3
  #     with:
  #       repository: llvm/llvm-project
  #       path: llvm-project
  #       ref: f28c006a5895fc0e329fe15fead81e37457cb1d1

  #   - name: Build LLVM
  #     if: steps.cache-llvm-restore.outputs.cache-hit != 'true'
  #     run: |
  #       cd llvm-project/llvm
  #       cmake -Bbuild -DCMAKE_INSTALL_PREFIX="./llvm" ${{matrix.cmake-options}} ${{matrix.llvm-options}}
  #       cmake --build build --config Release

  #   - name: Cache LLVM output
  #     id: cache-llvm-save
  #     uses: actions/cache/save@v3
  #     with:
  #       path: llvm-project
  #       key: ${{ steps.cache-llvm-restore.outputs.cache-primary-key }}

  #   - name: Build libfaust
  #     run: |
  #       cp -r libsndfile/include libsndfile/build/include
  #       cd build
  #       cmake  -C ./backends/all.cmake . -Bbuild ${{matrix.cmake-options}} -DINCLUDE_DYNAMIC=ON -DINCLUDE_LLVM=ON -DUSE_LLVM_CONFIG=off -DINCLUDE_SNDFILE=ON -DSndFile_DIR=$SndFile_DIR -DCMAKE_PREFIX_PATH="$LLVM_DIR" -DCMAKE_MODULE_PATH="$SndFile_DIR/../cmake"
  #       cmake --build build --config Release
  #     env:
  #       LLVM_DIR: ${{ github.workspace }}/llvm-project/llvm/build/lib/cmake/llvm
  #       SndFile_DIR: ${{ github.workspace }}/libsndfile/build
   
  #   - name: Make distribution
  #     run: |
  #       cd build/lib
  #       rm -f libfaust.so libfaust.so.2
  #       newest=$(ls -1 libfaust.so.* | tail -n1)
  #       mv "$newest" libfaust.so
  #       strip --strip-unneeded libfaust.so
        
  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: libfaust-${{ matrix.name }}
  #       path: build/lib
  #       if-no-files-found: error

  build-macos:
    strategy:
      matrix:
        include:
          # - name: macos-x86_64
          #   os: macos-11
          #   cmake-options: >-
          #     -DCMAKE_BUILD_TYPE=Release
          #     -DCMAKE_VERBOSE_MAKEFILE=ON
          #     -DCMAKE_OSX_ARCHITECTURES="x86_64"
          #     -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15
          #   llvm-options: >-
          #     -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-apple-darwin19.6.0"
          #     -DLLVM_TARGETS_TO_BUILD="X86"
          #     -DLLVM_ENABLE_ZLIB=off
          #     -DLLVM_OPTIMIZED_TABLEGEN=ON
          #     -DCMAKE_INSTALL_PREFIX="./llvm"
          #     -DLLVM_INCLUDE_TESTS=OFF
          - name: macos-arm64
            os: macos-11
            cmake-options: >-
              -DCMAKE_BUILD_TYPE=Release
              -DCMAKE_VERBOSE_MAKEFILE=ON
              -DCMAKE_OSX_ARCHITECTURES="arm64"
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15
            llvm-options: >-
              -DLLVM_DEFAULT_TARGET_TRIPLE="arm64-apple-darwin19.6.0"
              -DLLVM_TARGETS_TO_BUILD="AArch64"
              -DLLVM_ENABLE_ZLIB=off
              -DLLVM_OPTIMIZED_TABLEGEN=ON
              -DCMAKE_INSTALL_PREFIX="./llvm"
              -DLLVM_INCLUDE_TESTS=OFF

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Restore libsndfile
      id: cache-libsndfile-restore
      uses: actions/cache/restore@v3
      with:
        path: libsndfile
        key: cache-libsndfile-${{ matrix.name }}

    - name: Clone libsndfile
      if: steps.cache-libsndfile-restore.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: libsndfile/libsndfile
        path: libsndfile

    - name: Install (x86) libsndfile MacOS dependencies
      if: contains(matrix.name,'x86')
      run: |
        brew install automake autogen speex mpg123 lame flac libogg

    - name: Install (arm64) libsndfile MacOS dependencies
      if: contains(matrix.name,'arm64')
      run: |
        mkdir -p ~/arm-target/bin
        mkdir -p ~/arm-target/brew-cache
        export PATH="$HOME/arm-target/bin:$PATH"
        cd ~/arm-target
        mkdir arm-homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C arm-homebrew
        ln -s ~/arm-target/arm-homebrew/bin/brew ~/arm-target/bin/arm-brew
        export HOMEBREW_CACHE=~/arm-target/brew-cache
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        arm-brew fetch --deps --bottle-tag=arm64_big_sur automake autogen speex mpg123 lame flac libogg |\
          grep -E "(Downloaded to:|Already downloaded:)" |\
          grep -v pkg-config |\
          awk '{ print $3 }' |\
          xargs -n 1 arm-brew install --ignore-dependencies --force-bottle
        arm-brew install pkg-config
        ln -s ~/arm-target/arm-homebrew/bin/pkg-config ~/arm-target/bin/arm-pkg-config

    - name: Build libsndfile
      if: steps.cache-libsndfile-restore.outputs.cache-hit != 'true'
      run: |
        cd libsndfile
        cmake -Bbuild -G "Unix Makefiles" ${{matrix.cmake-options}} -DBUILD_EXAMPLES=OFF
        cmake --build build --config Release

    - name: Cache libsndfile output
      id: cache-libsndfile-save
      uses: actions/cache/save@v3
      with:
        path: libsndfile
        key: ${{ steps.cache-libsndfile-restore.outputs.cache-primary-key }}

    - name: Restore LLVM
      id: cache-llvm-restore
      uses: actions/cache/restore@v3
      with:
        path: llvm-project
        key: cache-llvm-${{ matrix.name }}

    - name: Clone LLVM
      if: steps.cache-llvm-restore.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: llvm/llvm-project
        path: llvm-project
        ref: f28c006a5895fc0e329fe15fead81e37457cb1d1

    - name: Build LLVM
      if: steps.cache-llvm-restore.outputs.cache-hit != 'true'
      run: |
        cd llvm-project/llvm
        cmake -Bbuild ${{matrix.cmake-options}} ${{matrix.llvm-options}}
        cmake --build build --config Release

    - name: Cache LLVM output
      id: cache-llvm-save
      uses: actions/cache/save@v3
      with:
        path: llvm-project
        key: ${{ steps.cache-llvm-restore.outputs.cache-primary-key }}

    - name: Build libfaust
      run: |
        cp -r libsndfile/include libsndfile/build/include
        cd build
        cmake  -C ./backends/all.cmake . -Bbuild ${{matrix.cmake-options}} -DINCLUDE_DYNAMIC=ON -DINCLUDE_LLVM=ON -DUSE_LLVM_CONFIG=off -DINCLUDE_SNDFILE=ON -DSndFile_DIR=$SndFile_DIR -DCMAKE_PREFIX_PATH="$LLVM_DIR" -DCMAKE_MODULE_PATH="$SndFile_DIR/../cmake"
        cmake --build build --config Release
      env:
        LLVM_DIR: ${{ github.workspace }}/llvm-project/llvm/build/lib/cmake/llvm
        SndFile_DIR: ${{ github.workspace }}/libsndfile/build
   
    - name: Make distribution
      run: |
        ls -r build/lib/*
        mkdir libfaust
        cp build/lib/libfaust.2.dylib libfaust/libfaust.2.dylib
        cp -v -r build/lib/*.a libfaust
   
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: libfaust-${{ matrix.name }}
        path: libfaust
        if-no-files-found: error

  # build-windows:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       include:
  #         - name: win-x86_64
  #           os: windows-2022
  #           cmake-options: >-
  #             -DCMAKE_BUILD_TYPE=Release
  #             -DCMAKE_VERBOSE_MAKEFILE=ON
  #           llvm-options: >-
  #             -Thost=x64
  #             -DLLVM_USE_CRT_DEBUG=MDd
  #             -DLLVM_USE_CRT_RELEASE=MD
  #             -DCMAKE_INSTALL_PREFIX="./llvm"
  #             -DLLVM_ENABLE_ZLIB=off
  #             -DLLVM_OPTIMIZED_TABLEGEN=ON
  #             -DLLVM_TARGETS_TO_BUILD="X86;ARM"
  #             -DLLVM_INCLUDE_TESTS=OFF

  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: true

  #   - name: Restore libsndfile
  #     id: cache-libsndfile-restore
  #     uses: actions/cache/restore@v3
  #     with:
  #       path: libsndfile
  #       key: cache-libsndfile-${{ matrix.name }}

  #   - name: Clone libsndfile
  #     if: steps.cache-libsndfile-restore.outputs.cache-hit != 'true'
  #     uses: actions/checkout@v3
  #     with:
  #       repository: libsndfile/libsndfile
  #       path: libsndfile

  #   - name: Build libsndfile
  #     if: steps.cache-libsndfile-restore.outputs.cache-hit != 'true'
  #     run: |
  #       cd libsndfile
  #       cmake -Bbuild ${{matrix.cmake-options}} -DBUILD_EXAMPLES=OFF
  #       cmake --build build --config Release

  #   - name: Cache libsndfile output
  #     id: cache-libsndfile-save
  #     uses: actions/cache/save@v3
  #     with:
  #       path: libsndfile
  #       key: ${{ steps.cache-libsndfile-restore.outputs.cache-primary-key }}

  #   - name: Restore LLVM
  #     id: cache-llvm-restore
  #     uses: actions/cache/restore@v3
  #     with:
  #       path: llvm-project
  #       key: cache-llvm-${{ matrix.name }}

  #   - name: Clone LLVM
  #     if: steps.cache-llvm-restore.outputs.cache-hit != 'true'
  #     uses: actions/checkout@v3
  #     with:
  #       repository: llvm/llvm-project
  #       path: llvm-project
  #       ref: f28c006a5895fc0e329fe15fead81e37457cb1d1

  #   - name: Build LLVM
  #     if: steps.cache-llvm-restore.outputs.cache-hit != 'true'
  #     run: |
  #       cd llvm-project/llvm
  #       cmake -Bbuild ${{matrix.llvm-options}}
  #       cmake --build build --config Release
    
  #   - name: Cache LLVM output
  #     id: cache-llvm-save
  #     uses: actions/cache/save@v3
  #     with:
  #       path: llvm-project
  #       key: ${{ steps.cache-llvm-restore.outputs.cache-primary-key }}

  #   - name: Build libfaust
  #     run: |
  #       cp -r libsndfile/include libsndfile/build/include
  #       cd build
  #       cmake -C ./backends/all.cmake . -Bbuild ${{matrix.cmake-options}} -DINCLUDE_DYNAMIC=ON -DINCLUDE_LLVM=ON -DUSE_LLVM_CONFIG=off -DINCLUDE_SNDFILE=ON -DSndFile_DIR=%SndFile_DIR% -DCMAKE_PREFIX_PATH="%LLVM_DIR%" -DCMAKE_MODULE_PATH="%SndFile_DIR%/../cmake"
  #       cmake --build build --config Release
  #     env:
  #       LLVM_DIR: ${{ github.workspace }}/llvm-project/llvm/build/lib/cmake/llvm
  #       SndFile_DIR: ${{ github.workspace }}/libsndfile/build
   
  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: libfaust-${{ matrix.name }}
  #       path: build/lib/Release
  #       if-no-files-found: error
