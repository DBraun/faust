name: libfaust

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build-ubuntu:
    strategy:
      matrix:
        include:
          - name: ubuntu-x86_64
            theContainer: docker://quay.io/pypa/manylinux2014_x86_64
            os: ubuntu-latest
            cmake-options: >-
              -DCMAKE_BUILD_TYPE=Release
              -DCMAKE_VERBOSE_MAKEFILE=ON
            llvm-options: >-
              -DLLVM_TARGETS_TO_BUILD="X86"
              -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-linux-gnu"

    runs-on: ubuntu-latest
    container:
      image: ${{matrix.theContainer}}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Restore libsndfile
      id: cache-libsndfile-restore
      uses: actions/cache/restore@v3
      with:
        path: libsndfile
        key: cache-libsndfile-${{ matrix.name }}

    - name: Clone libsndfile
      if: steps.cache-libsndfile-restore.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: libsndfile/libsndfile
        path: libsndfile

    - name: Build libsndfile
      if: steps.cache-libsndfile-restore.outputs.cache-hit != 'true'
      run: |
        cd libsndfile
        cmake .. -Bbuild -G "Unix Makefiles" ${{matrix.cmake-options}} -DENABLE_EXTERNAL_LIBS=off -DBUILD_EXAMPLES=OFF
        cmake --build build --config Release

    - name: Cache libsndfile output
      id: cache-libsndfile-save
      uses: actions/cache/save@v3
      with:
        path: libsndfile
        key: ${{ steps.cache-libsndfile-restore.outputs.cache-primary-key }}

    - name: Restore LLVM
      id: cache-llvm-restore
      uses: actions/cache/restore@v3
      with:
        path: llvm-project
        key: cache-llvm-${{ matrix.name }}

    - name: Clone LLVM
      if: steps.cache-llvm-restore.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: llvm/llvm-project
        path: llvm-project
        ref: f28c006a5895fc0e329fe15fead81e37457cb1d1

    - name: Build LLVM
      if: steps.cache-llvm-restore.outputs.cache-hit != 'true'
      run: |
        cd llvm-project/llvm
        cmake -Bbuild -DCMAKE_INSTALL_PREFIX="./llvm" ${{matrix.cmake-options}} ${{matrix.llvm-options}} -DLLVM_ENABLE_ZLIB=off -DLLVM_OPTIMIZED_TABLEGEN=ON
        cmake --build build --config Release

    - name: Cache LLVM output
      id: cache-llvm-save
      uses: actions/cache/save@v3
      with:
        path: llvm-project
        key: ${{ steps.cache-llvm-restore.outputs.cache-primary-key }}

    - name: Build libfaust
      run: |
        export SndFile_DIR="$PWD/libsndfile/build"
        cp -r libsndfile/include libsndfile/build/include
        cd build
        cmake  -C ./backends/all.cmake . -Bbuild ${{matrix.cmake-options}} -DINCLUDE_DYNAMIC=ON -DINCLUDE_LLVM=ON -DUSE_LLVM_CONFIG=off -DINCLUDE_SNDFILE=ON -DSndFile_DIR=$SndFile_DIR -DCMAKE_PREFIX_PATH="$PWD/../llvm-project/llvm/build/lib/cmake/llvm;$PWD/../libsndfile/cmake"
        cmake --build build --config Release
   
    - name: Make distribution
      run: |
        strip --strip-unneeded build/lib/libfaust.so
        mkdir libfaust_dist
        cp -v -r build/lib/libfaust.so libfaust_dist
        zip -r libfaust-${{ matrix.name }}.zip libfaust_dist
   
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: my-artifact-${{ matrix.name }}
        path: libfaust_dist